<?xml version='1.0' encoding='UTF-8'?>
<algorithm name="Grobid Header Extraction" version="0.1"><title>Programming Without a Computer: A New Interface for Children under Eight</title><authors><author><name>Peta Wyeth</name><affiliation>University of Queensland, Department of Computer Science and Electrical Engineering</affiliation></author><author><name>Helen C Purchase</name><affiliation>University of Queensland, Department of Computer Science and Electrical Engineering</affiliation></author></authors><keywords /></algorithm><TEI>
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Programming Without a Computer: A New Interface for Children under Eight</title>
			</titleStmt>
			<publicationStmt>
				<publisher />
				<availability status="unknown"><licence /></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName>
								<forename type="first">Peta</forename>
								<surname>Wyeth</surname>
							</persName>
							<affiliation>
								<orgName type="department">Department of Computer Science and Electrical Engineering</orgName>
								<orgName type="institution">University of Queensland</orgName>
								<address>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName>
								<forename type="first">Helen</forename>
								<forename type="middle">C</forename>
								<surname>Purchase</surname>
							</persName>
							<affiliation>
								<orgName type="department">Department of Computer Science and Electrical Engineering</orgName>
								<orgName type="institution">University of Queensland</orgName>
								<address>
									<country key="AU">Australia</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Programming Without a Computer: A New Interface for Children under Eight</title>
					</analytic>
					<monogr>
						<imprint>
							<date />
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Electronic Blocks are a new programming interface, designed for children aged between three and eight years. The Electronic Blocks programming environment includes sensor blocks, action blocks and logic blocks. By connecting these blocks children can program structures that interact with the environment. The Electronic Block programming interface design is based on principles of developmentally appropriate practices in early childhood education. As a result the blocks provide young children with a programming environment that allows them to explore quite complex programming principles. The simple syntax of the blocks provides opportunities for young children unavailable through the use of traditional programming languages. The blocks allow children to create and use simple code structures. The Electronic Block environment provides a developmentally appropriate environment for planning overall strategies for solving a problem, breaking a strategy down into manageable units, and systematically determining the weakness of the solution. Electronic Blocks are the physical embodiment of computer programming. They have the unique dynamic and programmable properties of a computer minus its complexity.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
	</text>
</TEI><algorithms version="110505">
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="false">
<title>A Flexible Programming Interface for Children of All Ages</title>
<marker />
<rawString> 6.2. A Flexible Programming Interface for Children of All Ages</rawString>
</citation>
<citation valid="true">
<authors>
<author>T Adams</author>
</authors>
<title>Logo environments: The evolution of the language.</title>
<date>1996</date>
<booktitle>Logo in Australia: Selected readings</booktitle>
<pages>1--16</pages>
<editor>In J. Oakley (ed.),</editor>
<location>Richmond, Vic:</location>
<contexts>
<context citStr="[1]" endWordPosition="3623" position="22848" startWordPosition="3623">ex. This is largely due to the greater complexity of both the syntax and semantics of these languages. A new generation of the Logo programming language, Boxer, developed at MIT and designed as the successor of Logo, attempts to address this issues. The designers have created an environment where computational objects such as programs are visual units (boxes) that may be easily manipulated as a whole. They have attempted to create a system that allows children to directly change or use anything put on the screen, thereby creating a simple form of concrete programming (di Sessa, 1984, cited in [1]). Such work acknowledges the difficulties faced by young children when learning to master a programming language. 5.4. Debugging An important consideration in the debugging process is the need that programmers have to evaluate incomplete programs as well as finished ones [4]. In fact, studies show that the less experienced the programmer, the smaller the amount that is produced before it must be evaluated. An important characteristic of the Electronic Blocks is that small fragments of larger programs are generally complete within themselves and may easily be tested in a standalone fashion. An</context>
</contexts>
<marker>[1]</marker>
<rawString>Adams, T. (1996). Logo environments: The evolution of the language. In J. Oakley (ed.), Logo in Australia: Selected readings (pp. 1-16). Richmond, Vic: Computing in Education Group of Victoria.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Bredekamp</author>
<author>C Copple</author>
</authors>
<title>Developmentally appropriate practice in early childhood education.</title>
<date>1997</date>
<booktitle>National Association for the Education of Young Children.</booktitle>
<editor>(Revised ed.). Washington, D.C.:</editor>
<contexts>
<context citStr="[2]" endWordPosition="1171" position="8005" startWordPosition="1171">te early childhood education, the design of Electronic Blocks must ensure: 1. activities are open-ended and discovery-oriented, allowing children to be actively involved in the learning process; 2. interaction encourages child-initiated play; 3. experiences involve active manipulation and transformation of real materials; 4. entry level knowledge and experience is kept to a minimum; 5. provision is made for children’s varied skill and ability levels; 6. construction activities that involve design, creation and evaluation processes form the basis of interactions. (based on Bredekamp and Copple [2]) Applying the principles of developmentally appropriate practices, aims to ensure that the Electronic Blocks are a developmentally appropriate resource for providing programming experiences to children under the age of eight. In addition, in order to create a programmable resource, electronic blocks have been designed using guidelines outlined by Resnick [11]. These guidelines have formed the basis of the following design criteria. Electronic Blocks need to: 7. be non-algorithmic – the path of action is not fully specified in advance; 8. be complex – the total path is not visible; 9. incorpor</context>
</contexts>
<marker>[2]</marker>
<rawString>Bredekamp, S., &amp; Copple, C. (Eds.). (1997). Developmentally appropriate practice in early childhood education. (Revised ed.). Washington, D.C.: National Association for the Education of Young Children.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H K Cuffaro</author>
</authors>
<title>Microcomputers in education: Why is earlier better?</title>
<date>1984</date>
<journal>Teachers College Record,</journal>
<volume>85</volume>
<pages>559--568</pages>
<contexts>
<context citStr="[3]" endWordPosition="557" position="3863" startWordPosition="557">ildren to explore programming concepts as hypothesised in this paper. 1.1. Learning to Program: A Powerful Educational Experience When computers were first introduced in early childhood settings, there was a propensity for using the computer as a tool to reinforce existing practices, facilitating activities such as reading, writing and mathematics. This mechanistic style of computer use, still seen to some extent in schools, led educators to ask whether or not computer-based activities offer anything that is substantially different from what can be obtained in the classroom by other means [13][3][14]. The answer for some has been for educational institutions to embrace computer use that offers opportunities for children to explore the computer’s unique dynamic and programmable properties. From as early as 1980, with the groundbreaking work of Papert [9], researchers recognised that computer programming as an educational activity had great potential as a vehicle for the acquisition of useful cognitive skills such as problem solving and reflective thinking. The research outlined in this paper follows this school of thought. It is widely acknowledged that while computers can have many fu</context>
</contexts>
<marker>[3]</marker>
<rawString>Cuffaro, H. K. (1984). Microcomputers in education: Why is earlier better? Teachers College Record, 85, 559-568.</rawString>
</citation>
<citation valid="true">
<authors>
<author>T R G Green</author>
<author>M Petre</author>
</authors>
<title>Usability analysis of visual programming environments: A ‘cognitive dimensions’ framework.</title>
<date>1996</date>
<journal>Journal of Visual Languages and Computing,</journal>
<volume>7</volume>
<pages>131--174</pages>
<contexts>
<context citStr="[4]" endWordPosition="2997" position="19126" startWordPosition="2997">computer programming language, the syntax of electronic blocks are significantly less complex. This lack of complexity ensures that Electronic Blocks provide a powerful platform for teaching children fundamental programming concepts. Reducing the complexity of the syntax provides children with greater opportunities to focus on high-level programming concepts such as debugging, planning and evaluating strategies. 5.2. Coding Simple Structures An important issue in learning to program is program design – successful mapping between problem domain and program domain (as defined by Brooks cited in [4]). Research indicates that end user programmers have difficulty dealing with entities in the program domain that do not have corresponding entities in the problem domain and an abundance of low level primitives is one of the great cognitive barriers to programming (for a review of this research see [4]). Given the cognitive limitations of young children, it may be concluded that such difficulties would be amplified. An important consideration, then, for creating a programming environment for young children, is the inclusion of entities that map directly back to the problem domain. Electronic b</context>
<context citStr="[4]" endWordPosition="3664" position="23124" startWordPosition="3664"> an environment where computational objects such as programs are visual units (boxes) that may be easily manipulated as a whole. They have attempted to create a system that allows children to directly change or use anything put on the screen, thereby creating a simple form of concrete programming (di Sessa, 1984, cited in [1]). Such work acknowledges the difficulties faced by young children when learning to master a programming language. 5.4. Debugging An important consideration in the debugging process is the need that programmers have to evaluate incomplete programs as well as finished ones [4]. In fact, studies show that the less experienced the programmer, the smaller the amount that is produced before it must be evaluated. An important characteristic of the Electronic Blocks is that small fragments of larger programs are generally complete within themselves and may easily be tested in a standalone fashion. An example of this is the creation of a vehicle that moves either when it hears a noise or when it sees a light. A partial solution would involve placing a hearing block on a movement block. This “code fragment” could be tested simply by making a noise to ensure that the vehicl</context>
<context citStr="[4]" endWordPosition="4166" position="26162" startWordPosition="4166">mote Control Light Block Seeing Block Not Block Light Block Seeing Block Delay Block Robot1 Robot2 The emergent nature of the problem makes it an ideal programming task for children. The path of action is not fully specified in advance, nor is it visible. Children are required to make a plan of action, evaluate each step through testing their solution and make any necessary adjustments. Possessing strategies for planning and debugging is a prerequisite for programming success. Many bugs arise as a result of plan composition problems – difficulties in putting the ‘pieces’ of a program together [4]. Electronic Blocks avoid this difficulty because each piece of a program works independently and each step towards a solution may easily be tested. In addition, research suggests that using spatial reasoning for support may be useful in the planning and debugging processes [4]. Electronic Blocks provide more scope for visual and spatial reasoning than text based languages. 5.6. Evaluation of Alternate Strategies There are many Electronic Block programming tasks that have multiple solutions, each with costs and benefits. As a physically embodied programming environment, Electronic Blocks provi</context>
</contexts>
<marker>[4]</marker>
<rawString>Green, T. R. G., &amp; Petre, M. (1996). Usability analysis of visual programming environments: A ‘cognitive dimensions’ framework. Journal of Visual Languages and Computing, 7, 131-174.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D F Gullo</author>
</authors>
<title>Development and characteristics of kindergarten-age children.</title>
<date>1992</date>
<booktitle>Encyclopaedia of early childhood education</booktitle>
<pages>206--207</pages>
<editor>In L. R. Williams, &amp; D. P. Fromberg (eds.),</editor>
<publisher>Garland Publishing Inc.</publisher>
<location>New York:</location>
<contexts>
<context citStr="[5]" endWordPosition="3307" position="20969" startWordPosition="3307"> entity in the Electronic Block system maps directly to the problem domain. While new task-specific visual programming languages are being designed to address this issue, most computer programming languages are full of low-level primitives that do not map directly back to the problem domain. The act of coding a simple structure in most programming languages requires a knowledge of low-level primitives and how they should be combined to achieve the desired result. Given that young children rely more on their visual and auditory perception for knowledge than they do on logical thought processes [5] it is understandable that they find type of programming is extremely difficult. 5.3. Use of Simple Structures A child can create a camera flash by placing a touch block on top of a light block. They can create a remote control car by placing a seeing block on a movement block and then using the camera flash as the remote control (see Figure 3). Pressing the touch sensor would result in a light turning on. This light would be sensed by the seeing block, which would in turn trigger the movement of the movement block. A remote control vehicle has been created. This is an example of a way in whic</context>
</contexts>
<marker>[5]</marker>
<rawString>Gullo, D. F. (1992). Development and characteristics of kindergarten-age children. In L. R. Williams, &amp; D. P. Fromberg (eds.), Encyclopaedia of early childhood education (pp 206-207). New York: Garland Publishing Inc.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Kahn</author>
</authors>
<title>ToonTalkTM – An animated programming environment for children.</title>
<date>1996</date>
<journal>Journal of Visual Languages and Computing,</journal>
<volume>7</volume>
<pages>197--217</pages>
<contexts>
<context citStr="[6]" endWordPosition="2356" position="15192" startWordPosition="2356">gers the light. This light in turn is detected as an input by the seeing block which actives the movement block. 5. Promoting Programming Skills with Electronic Blocks Programming is generally thought of in terms of code writing and debugging – in essence consisting of “a series of written instructions that make a computer accomplish a task” (Pea and Kurland, 1984 as cited in [8]). However, in recent years, the changing nature of computer interfaces has lead people to question this definition of programming. Given the development of direct manipulation programming languages such as ToonTalkTM [6] and Cocoa [15], the acceptance of “languageless” programming as a legitimate alternative for the purpose of teaching programming is gaining momentum. In addition to “writing code” programming is about defining a problem and being able to generate effective programming approaches with an awareness of the alternatives that are most appropriate. A programmer needs to design a solution based on a hypothesis of how the problem will best be solved. Developing a solution requires an evaluation of alternate strategies and careful planning of the steps required to achieve this solution. Subsequent tes</context>
</contexts>
<marker>[6]</marker>
<rawString>Kahn, K. (1996). ToonTalkTM – An animated programming environment for children. Journal of Visual Languages and Computing, 7, 197-217.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Kay</author>
</authors>
<title>Observations about children and computers.</title>
<date>1994</date>
<institution>Advanced Technology Group, Learning Concepts Group, Apple Research Laboratory</institution>
<note>Research Note No. 31. [Online]. Available: http://www.atg.apple.com/technology/reports/RN31.html</note>
<contexts>
<context citStr="[7]" endWordPosition="758" position="5181" startWordPosition="758">d dynamic properties unique to it. It is these properties which make it different from other media with which children interact. This type of computer exploration allows children to become involved in technology in a way recommended by Raizen et al. [10]. Computer programming requires children to use their intellectual resources while involved in processes such as designing, producing and using, to create systems and structures. Programming also provides the opportunity for children to become involved in “seeing and constructing in terms of new formal knowledge of how things are put together” [7]. For over a decade researchers a MIT Media Laboratory have been studying the richness of experiences that involve exploration of the dynamic and programmable properties of a computer. The strong belief that children benefit greatly from becoming creators, not just consumers, of computer activities, drives their research. It is a philosophy embraced by the research discussed in this paper. Programming a computer allows children to have an impact on the technology they are using, they become the creators, and they are in control. Through learning to program a computer children develop a much de</context>
</contexts>
<marker>[7]</marker>
<rawString>Kay, A. (1994). Observations about children and computers. Advanced Technology Group, Learning Concepts Group, Apple Research Laboratory Research Note No. 31. [Online]. Available: http://www.atg.apple.com/technology/reports/RN31.html</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Oakley</author>
<author>A McDougall</author>
</authors>
<title>Young children as programmers: Fantasy or flight. In</title>
<date>1997</date>
<booktitle>Learning in Logo microworlds. Richmond, Vic: Computing in Education Group of Victoria.</booktitle>
<contexts>
<context citStr="[8]" endWordPosition="2325" position="14971" startWordPosition="2325">stack which contains a touch block and a light block and another stack which has a seeing block on top of a movement block, a child has effectively created a remote control car. By pressing the touch block, the child triggers the light. This light in turn is detected as an input by the seeing block which actives the movement block. 5. Promoting Programming Skills with Electronic Blocks Programming is generally thought of in terms of code writing and debugging – in essence consisting of “a series of written instructions that make a computer accomplish a task” (Pea and Kurland, 1984 as cited in [8]). However, in recent years, the changing nature of computer interfaces has lead people to question this definition of programming. Given the development of direct manipulation programming languages such as ToonTalkTM [6] and Cocoa [15], the acceptance of “languageless” programming as a legitimate alternative for the purpose of teaching programming is gaining momentum. In addition to “writing code” programming is about defining a problem and being able to generate effective programming approaches with an awareness of the alternatives that are most appropriate. A programmer needs to design a so</context>
</contexts>
<marker>[8]</marker>
<rawString>Oakley, J., &amp; McDougall, A. (1997). Young children as programmers: Fantasy or flight. In A. McDougall, &amp; C. Dowling (Eds.), Learning in Logo microworlds. Richmond, Vic: Computing in Education Group of Victoria.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S Papert</author>
</authors>
<title>Mindstorms: Children, computers and powerful ideas.</title>
<date>1980</date>
<publisher>Basic Books.</publisher>
<location>New York:</location>
<contexts>
<context citStr="[9]" endWordPosition="597" position="4125" startWordPosition="597">ce existing practices, facilitating activities such as reading, writing and mathematics. This mechanistic style of computer use, still seen to some extent in schools, led educators to ask whether or not computer-based activities offer anything that is substantially different from what can be obtained in the classroom by other means [13][3][14]. The answer for some has been for educational institutions to embrace computer use that offers opportunities for children to explore the computer’s unique dynamic and programmable properties. From as early as 1980, with the groundbreaking work of Papert [9], researchers recognised that computer programming as an educational activity had great potential as a vehicle for the acquisition of useful cognitive skills such as problem solving and reflective thinking. The research outlined in this paper follows this school of thought. It is widely acknowledged that while computers can have many functions within an early education setting, its power as a tool for technology education lies in the programmable and dynamic properties unique to it. It is these properties which make it different from other media with which children interact. This type of compu</context>
</contexts>
<marker>[9]</marker>
<rawString>Papert, S. (1980). Mindstorms: Children, computers and powerful ideas. New York: Basic Books.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S A Raizen</author>
<author>P Sellwood</author>
<author>R D Todd</author>
<author>M Vickers</author>
</authors>
<title>Technology education in the classroom: Understanding the designed world. San Francisco:</title>
<date>1995</date>
<publisher>Jossey-Bass Publishers.</publisher>
<contexts>
<context citStr="[10]" endWordPosition="707" position="4832" startWordPosition="707">vehicle for the acquisition of useful cognitive skills such as problem solving and reflective thinking. The research outlined in this paper follows this school of thought. It is widely acknowledged that while computers can have many functions within an early education setting, its power as a tool for technology education lies in the programmable and dynamic properties unique to it. It is these properties which make it different from other media with which children interact. This type of computer exploration allows children to become involved in technology in a way recommended by Raizen et al. [10]. Computer programming requires children to use their intellectual resources while involved in processes such as designing, producing and using, to create systems and structures. Programming also provides the opportunity for children to become involved in “seeing and constructing in terms of new formal knowledge of how things are put together” [7]. For over a decade researchers a MIT Media Laboratory have been studying the richness of experiences that involve exploration of the dynamic and programmable properties of a computer. The strong belief that children benefit greatly from becoming crea</context>
</contexts>
<marker>[10]</marker>
<rawString>Raizen, S. A., Sellwood, P., Todd, R. D., &amp; Vickers, M. (1995). Technology education in the classroom: Understanding the designed world. San Francisco: Jossey-Bass Publishers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L Resnick</author>
</authors>
<title>Education and learning to think.</title>
<date>1987</date>
<booktitle>Committee on Mathematics, Science, and Technology Education, Commission on Behavioural and Social Sciences and Education, National Research Council.</booktitle>
<publisher>National Academy Press.</publisher>
<location>Washington, D.C.:</location>
<contexts>
<context citStr="[11]" endWordPosition="1221" position="8367" startWordPosition="1221">ce is kept to a minimum; 5. provision is made for children’s varied skill and ability levels; 6. construction activities that involve design, creation and evaluation processes form the basis of interactions. (based on Bredekamp and Copple [2]) Applying the principles of developmentally appropriate practices, aims to ensure that the Electronic Blocks are a developmentally appropriate resource for providing programming experiences to children under the age of eight. In addition, in order to create a programmable resource, electronic blocks have been designed using guidelines outlined by Resnick [11]. These guidelines have formed the basis of the following design criteria. Electronic Blocks need to: 7. be non-algorithmic – the path of action is not fully specified in advance; 8. be complex – the total path is not visible; 9. incorporate uncertainty – not everything that bears on the task at hand is known; 10. allow users to find structure in apparent disorder; 11. yield multiple solutions, each with costs and benefits. These 11 design criteria have formed the platform on which the Electronic Blocks have been based. 3. A Description of Electronic Blocks The Electronic Blocks have been desi</context>
</contexts>
<marker>[11]</marker>
<rawString>Resnick, L. (1987). Education and learning to think. Committee on Mathematics, Science, and Technology Education, Commission on Behavioural and Social Sciences and Education, National Research Council. Washington, D.C.: National Academy Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Resnick</author>
<author>A Bruckman</author>
<author>F Martin</author>
</authors>
<title>Pianos not stereos: Creating computational construction kits.</title>
<date>1996</date>
<journal>Interactions,</journal>
<volume>3</volume>
<issue>5</issue>
<pages>41--50</pages>
<contexts>
<context citStr="[12]" endWordPosition="862" position="5864" startWordPosition="862">ichness of experiences that involve exploration of the dynamic and programmable properties of a computer. The strong belief that children benefit greatly from becoming creators, not just consumers, of computer activities, drives their research. It is a philosophy embraced by the research discussed in this paper. Programming a computer allows children to have an impact on the technology they are using, they become the creators, and they are in control. Through learning to program a computer children develop a much deeper relationship with, and consequently deeper understanding of, the computer [12]. Unfortunately for young children, the ideas about instructions and sequence, which form the core of programming, are not necessarily simple. At a time when young children are only just acquiring the rudiments of notational systems and are struggling with symbolisation in language [13], it would be unreasonable to expect them to cope with the symbolic systems required to successfully program a computer. In addition, programming languages are artificial rather than natural languages and consequently, they have a different epistemology that deals with the unfamiliar world of computer data struc</context>
</contexts>
<marker>[12]</marker>
<rawString>Resnick, M., Bruckman, A., &amp; Martin, F. (1996) Pianos not stereos: Creating computational construction kits. Interactions, 3 (5), 41-50.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Sheingold</author>
</authors>
<title>The microcomputer as a symbolic medium. In</title>
<date>1987</date>
<publisher>Ablex Publishing Corporation.</publisher>
<location>Norwood, NJ:</location>
<contexts>
<context citStr="[13]" endWordPosition="557" position="3860" startWordPosition="557">w children to explore programming concepts as hypothesised in this paper. 1.1. Learning to Program: A Powerful Educational Experience When computers were first introduced in early childhood settings, there was a propensity for using the computer as a tool to reinforce existing practices, facilitating activities such as reading, writing and mathematics. This mechanistic style of computer use, still seen to some extent in schools, led educators to ask whether or not computer-based activities offer anything that is substantially different from what can be obtained in the classroom by other means [13][3][14]. The answer for some has been for educational institutions to embrace computer use that offers opportunities for children to explore the computer’s unique dynamic and programmable properties. From as early as 1980, with the groundbreaking work of Papert [9], researchers recognised that computer programming as an educational activity had great potential as a vehicle for the acquisition of useful cognitive skills such as problem solving and reflective thinking. The research outlined in this paper follows this school of thought. It is widely acknowledged that while computers can have many</context>
<context citStr="[13]" endWordPosition="905" position="6151" startWordPosition="905">h discussed in this paper. Programming a computer allows children to have an impact on the technology they are using, they become the creators, and they are in control. Through learning to program a computer children develop a much deeper relationship with, and consequently deeper understanding of, the computer [12]. Unfortunately for young children, the ideas about instructions and sequence, which form the core of programming, are not necessarily simple. At a time when young children are only just acquiring the rudiments of notational systems and are struggling with symbolisation in language [13], it would be unreasonable to expect them to cope with the symbolic systems required to successfully program a computer. In addition, programming languages are artificial rather than natural languages and consequently, they have a different epistemology that deals with the unfamiliar world of computer data structures and algorithms [15]. This makes them even more difficult to learn. As an alternative to the computer, Electronic Blocks are designed to provide preschool and early primary school children with a resource that has the unique dynamic and programmable properties of a computer minus i</context>
</contexts>
<marker>[13]</marker>
<rawString>Sheingold, K. (1987). The microcomputer as a symbolic medium. In R. D. Pea, &amp; K. Sheingold (Eds.), Mirrors of minds: Patterns of experience in educational computing (pp 198-208). Norwood, NJ: Ablex Publishing Corporation.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Sloan</author>
</authors>
<title>On raising critical questions about the computer in education.</title>
<date>1984</date>
<journal>Teachers College Record,</journal>
<volume>85</volume>
<pages>539--547</pages>
<contexts>
<context citStr="[14]" endWordPosition="557" position="3867" startWordPosition="557">ren to explore programming concepts as hypothesised in this paper. 1.1. Learning to Program: A Powerful Educational Experience When computers were first introduced in early childhood settings, there was a propensity for using the computer as a tool to reinforce existing practices, facilitating activities such as reading, writing and mathematics. This mechanistic style of computer use, still seen to some extent in schools, led educators to ask whether or not computer-based activities offer anything that is substantially different from what can be obtained in the classroom by other means [13][3][14]. The answer for some has been for educational institutions to embrace computer use that offers opportunities for children to explore the computer’s unique dynamic and programmable properties. From as early as 1980, with the groundbreaking work of Papert [9], researchers recognised that computer programming as an educational activity had great potential as a vehicle for the acquisition of useful cognitive skills such as problem solving and reflective thinking. The research outlined in this paper follows this school of thought. It is widely acknowledged that while computers can have many functi</context>
</contexts>
<marker>[14]</marker>
<rawString>Sloan, D. (1984). On raising critical questions about the computer in education. Teachers College Record, 85, 539-547.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D C Smith</author>
<author>A Cypher</author>
<author>K Schmucker</author>
</authors>
<title>Making programming easier for children.</title>
<date>1996</date>
<journal>Interactions, September – October,</journal>
<pages>59--67</pages>
<contexts>
<context citStr="[15]" endWordPosition="954" position="6489" startWordPosition="954">oung children, the ideas about instructions and sequence, which form the core of programming, are not necessarily simple. At a time when young children are only just acquiring the rudiments of notational systems and are struggling with symbolisation in language [13], it would be unreasonable to expect them to cope with the symbolic systems required to successfully program a computer. In addition, programming languages are artificial rather than natural languages and consequently, they have a different epistemology that deals with the unfamiliar world of computer data structures and algorithms [15]. This makes them even more difficult to learn. As an alternative to the computer, Electronic Blocks are designed to provide preschool and early primary school children with a resource that has the unique dynamic and programmable properties of a computer minus its complexity. Electronic Blocks are the physical embodiment of computer programming. They are naturally less complex to program than a computer as they do not require a knowledge of complex symbolic systems. 2. Developing a New Programming Interface The Electronic Block programming interface incorporates two sets of design criteria, th</context>
<context citStr="[15]" endWordPosition="2359" position="15207" startWordPosition="2359">. This light in turn is detected as an input by the seeing block which actives the movement block. 5. Promoting Programming Skills with Electronic Blocks Programming is generally thought of in terms of code writing and debugging – in essence consisting of “a series of written instructions that make a computer accomplish a task” (Pea and Kurland, 1984 as cited in [8]). However, in recent years, the changing nature of computer interfaces has lead people to question this definition of programming. Given the development of direct manipulation programming languages such as ToonTalkTM [6] and Cocoa [15], the acceptance of “languageless” programming as a legitimate alternative for the purpose of teaching programming is gaining momentum. In addition to “writing code” programming is about defining a problem and being able to generate effective programming approaches with an awareness of the alternatives that are most appropriate. A programmer needs to design a solution based on a hypothesis of how the problem will best be solved. Developing a solution requires an evaluation of alternate strategies and careful planning of the steps required to achieve this solution. Subsequent testing is require</context>
</contexts>
<marker>[15]</marker>
<rawString>Smith, D. C., Cypher, A., &amp; Schmucker, K. (1996). Making programming easier for children. Interactions, September – October, 59-67.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>